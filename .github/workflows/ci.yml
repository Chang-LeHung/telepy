name: CI Tests and Coverage

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff>=0.14.0

      - name: Run ruff check
        run: ruff check src/ tests/

      - name: Run ruff format check
        run: ruff format --check src/ tests/

  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and install - Unix
        if: runner.os != 'Windows'
        run: |
          make build
          make install

      - name: Build and install - Windows
        if: runner.os == 'Windows'
        run: |
          python -m build
          pip install .

      - name: Setup MSVC (Windows only)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run tests with retry (Attempt 1) - Unix
        if: runner.os != 'Windows'
        id: test_attempt_1_unix
        continue-on-error: true
        run: make test

      - name: Run tests with retry (Attempt 1) - Windows
        if: runner.os == 'Windows'
        id: test_attempt_1_windows
        continue-on-error: true
        shell: pwsh
        run: |
          $PKG_NAME = python setup.py --name
          cd "src/$PKG_NAME/telexsys"
          cl /EHsc /W4 /std:c++14 /DTELEX_TEST tree.cc /Fe:tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          .\tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          cd ..\..\..
          $env:PYTHONIOENCODING = "utf-8"
          Get-ChildItem tests\test_*.py | ForEach-Object {
            Write-Host "Running $($_.Name)"
            $env:TELEX_SUPPRESS_OUTPUT = "1"
            python -m unittest $_.FullName
            if ($LASTEXITCODE -ne 0) { exit 1 }
          }

      - name: Run tests with retry (Attempt 2) - Unix
        if: runner.os != 'Windows' && steps.test_attempt_1_unix.outcome == 'failure'
        id: test_attempt_2_unix
        continue-on-error: true
        run: make test

      - name: Run tests with retry (Attempt 2) - Windows
        if: runner.os == 'Windows' && steps.test_attempt_1_windows.outcome == 'failure'
        id: test_attempt_2_windows
        continue-on-error: true
        shell: pwsh
        run: |
          $PKG_NAME = python setup.py --name
          cd "src/$PKG_NAME/telexsys"
          cl /EHsc /W4 /std:c++14 /DTELEX_TEST tree.cc /Fe:tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          .\tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          cd ..\..\..
          $env:PYTHONIOENCODING = "utf-8"
          Get-ChildItem tests\test_*.py | ForEach-Object {
            Write-Host "Running $($_.Name)"
            $env:TELEX_SUPPRESS_OUTPUT = "1"
            python -m unittest $_.FullName
            if ($LASTEXITCODE -ne 0) { exit 1 }
          }

      - name: Run tests with retry (Attempt 3) - Unix
        if: runner.os != 'Windows' && steps.test_attempt_2_unix.outcome == 'failure'
        id: test_attempt_3_unix
        run: make test

      - name: Run tests with retry (Attempt 3) - Windows
        if: runner.os == 'Windows' && steps.test_attempt_2_windows.outcome == 'failure'
        id: test_attempt_3_windows
        shell: pwsh
        run: |
          $PKG_NAME = python setup.py --name
          cd "src/$PKG_NAME/telexsys"
          cl /EHsc /W4 /std:c++14 /DTELEX_TEST tree.cc /Fe:tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          .\tree_test.exe
          if ($LASTEXITCODE -ne 0) { exit 1 }
          cd ..\..\..
          $env:PYTHONIOENCODING = "utf-8"
          Get-ChildItem tests\test_*.py | ForEach-Object {
            Write-Host "Running $($_.Name)"
            $env:TELEX_SUPPRESS_OUTPUT = "1"
            python -m unittest $_.FullName
            if ($LASTEXITCODE -ne 0) { exit 1 }
          }

      - name: Check test results - Unix
        if: runner.os != 'Windows' && steps.test_attempt_1_unix.outcome == 'failure' && steps.test_attempt_2_unix.outcome == 'failure' && steps.test_attempt_3_unix.outcome == 'failure'
        run: |
          echo "Tests failed after 3 attempts"
          exit 1

      - name: Check test results - Windows
        if: runner.os == 'Windows' && steps.test_attempt_1_windows.outcome == 'failure' && steps.test_attempt_2_windows.outcome == 'failure' && steps.test_attempt_3_windows.outcome == 'failure'
        shell: pwsh
        run: |
          Write-Host "Tests failed after 3 attempts"
          exit 1

  coverage:
    name: Coverage Report on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and install
        run: |
          make build
          make install

      - name: Run coverage with retry (Attempt 1)
        id: coverage_attempt_1
        continue-on-error: true
        run: make coverage

      - name: Run coverage with retry (Attempt 2)
        id: coverage_attempt_2
        if: steps.coverage_attempt_1.outcome == 'failure'
        continue-on-error: true
        run: make coverage

      - name: Run coverage with retry (Attempt 3)
        id: coverage_attempt_3
        if: steps.coverage_attempt_2.outcome == 'failure'
        run: make coverage

      - name: Check coverage results
        if: steps.coverage_attempt_1.outcome == 'failure' && steps.coverage_attempt_2.outcome == 'failure' && steps.coverage_attempt_3.outcome == 'failure'
        run: |
          echo "Coverage failed after 3 attempts"
          exit 1

      - name: Upload coverage reports to Codecov
        if: steps.coverage_attempt_1.outcome == 'success' || steps.coverage_attempt_2.outcome == 'success' || steps.coverage_attempt_3.outcome == 'success'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.os }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage HTML report
        if: steps.coverage_attempt_1.outcome == 'success' || steps.coverage_attempt_2.outcome == 'success' || steps.coverage_attempt_3.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}
          path: htmlcov/
          retention-days: 30
